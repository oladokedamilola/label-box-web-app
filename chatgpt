Here are three sample projects with corresponding tasks that you can manually input in the frontend:

### Sample Project 1: **Image Annotation for Object Detection**
- **Project Name:** Object Detection Annotation
- **Description:** Annotating images to train object detection models. Tasks will involve labeling various objects in images such as cars, pedestrians, and traffic signs.

  **Tasks for this Project:**
  1. **Task Title:** Image 001 - Annotate Car and Pedestrian
     - **Description:** Annotate the car and pedestrian in the image.
     - **Image URL:** `https://example.com/image001.jpg`
     
  2. **Task Title:** Image 002 - Annotate Traffic Sign and Pedestrian
     - **Description:** Annotate the traffic sign and pedestrian in the image.
     - **Image URL:** `https://example.com/image002.jpg`

---

### Sample Project 2: **Medical Image Segmentation**
- **Project Name:** Medical Image Segmentation
- **Description:** Annotating medical images for segmentation tasks such as identifying tumors and organs in CT scans and MRI images.

  **Tasks for this Project:**
  1. **Task Title:** CT Scan 01 - Annotate Tumor Region
     - **Description:** Annotate the tumor regions in the CT scan.
     - **Image URL:** `https://example.com/ctscan01.jpg`
     
  2. **Task Title:** MRI Scan 01 - Annotate Brain Tumor
     - **Description:** Annotate the brain tumor in the MRI scan.
     - **Image URL:** `https://example.com/mri01.jpg`

---

### Sample Project 3: **Facial Recognition Dataset Creation**
- **Project Name:** Facial Recognition Dataset
- **Description:** Annotating facial features like eyes, nose, mouth, and overall face regions for facial recognition model training.

  **Tasks for this Project:**
  1. **Task Title:** Face Image 001 - Annotate Eyes, Nose, and Mouth
     - **Description:** Annotate the eyes, nose, and mouth in the image.
     - **Image URL:** `https://example.com/face001.jpg`
     
  2. **Task Title:** Face Image 002 - Annotate Full Face Region
     - **Description:** Annotate the full face region in the image.
     - **Image URL:** `https://example.com/face002.jpg`

---

You can use these sample projects and tasks to manually input data through your UI by typing the information directly into the form fields.


# @main.route('/submit', methods=['POST'])
# @login_required
# def submit_annotation():
#     try:
#         # Retrieve data from the form
#         task_id = request.form.get('task_id')
#         annotations_data = request.form.get('annotations_data')  # JSON with annotations
#         screenshot_data = request.form.get('screenshot_data')  # Base64 encoded image

#         print(f"Received task_id: {task_id}")
#         print(f"Received annotations_data: {annotations_data}")
#         print(f"Received screenshot_data: {bool(screenshot_data)}")  # Only checks if screenshot_data exists

#         if not task_id or not annotations_data or not screenshot_data:
#             print("Validation failed: Missing required fields.")
#             raise ValueError("Missing task_id, annotations_data, or screenshot_data in the request.")

#         # Parse the annotations
#         try:
#             annotations = json.loads(annotations_data)  # Parse annotation data
#             print(f"Parsed annotations: {annotations}")
#         except json.JSONDecodeError as e:
#             print(f"Error decoding annotations JSON: {e}")
#             raise ValueError(f"Error decoding annotations JSON: {e}")

#         # Find the annotation task
#         task = AnnotationTask.query.get_or_404(task_id)
#         print(f"Found task: {task}")

#         # Ensure the directory exists for storing screenshots
#         screenshot_upload_dir = os.path.join(current_app.root_path, 'static', 'uploads', 'screenshots', str(task_id))
#         os.makedirs(screenshot_upload_dir, exist_ok=True)
#         print(f"Screenshot upload directory: {screenshot_upload_dir}")

#         # Save the screenshot (base64 image)
#         try:
#             screenshot_data = screenshot_data.split(',')[1]  # Remove the "data:image/jpeg;base64," prefix
#             screenshot_bytes = base64.b64decode(screenshot_data)  # Decode the base64 image
#             screenshot_filename = f"{task_id}_screenshot.jpg"  # Updated to .jpg format
#             screenshot_path = os.path.join(screenshot_upload_dir, screenshot_filename)

#             with open(screenshot_path, 'wb') as f:
#                 f.write(screenshot_bytes)
#             print(f"Screenshot saved to: {screenshot_path}")
#         except Exception as e:
#             print(f"Error saving screenshot: {e}")
#             raise ValueError(f"Error saving screenshot: {e}")

#         # Process and store annotations in the database
#         for annotation in annotations:
#             # Extract annotation details
#             annotation_label = annotation.get('label', 'Unnamed')  # Default label
#             x, y, width, height = annotation.get('x'), annotation.get('y'), annotation.get('width'), annotation.get('height')
#             print(f"Processing annotation: label={annotation_label}, x={x}, y={y}, width={width}, height={height}")

#             # Save the annotation submission
#             new_submission = AnnotationSubmission(
#                 task_id=task.id,
#                 user_id=current_user.id,
#                 label=annotation_label,  # Label from annotation data
#                 x=x, y=y, width=width, height=height,  # Store bounding box details
#                 mask_path=screenshot_path  # Path to the saved screenshot
#             )
#             db.session.add(new_submission)

#         db.session.commit()
#         print("All annotations saved successfully.")

#         # Notify admins about the submission
#         notify_admin_on_submission(task)  # Define this function elsewhere
#         print("Admin notified of the submission.")

#         # Redirect to the task list after successful submission
#         flash("Annotation submitted successfully.", "success")
#         return redirect(url_for('main.task_list'))
    
#     except Exception as e:
#         print(f"Error occurred during annotation submission: {e}")
#         db.session.rollback()
#         return jsonify({'error': f'An error occurred: {str(e)}'}), 500